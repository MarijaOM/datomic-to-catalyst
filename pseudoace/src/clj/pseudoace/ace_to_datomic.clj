(ns ace-to-datomic
  (:require [pseudoace.model :as model]
            [pseudoace.model2schema :as model2schema] 

            [datomic.api :as datomic]
            [pseudoace.metadata-schema :as metadata-schema]
            [pseudoace.locatable-schema :as locatable-schema]
            [pseudoace.wormbase-schema-fixups :as wormbase-schema-fixups]

            [pseudoace.schema-datomic :as schema-datomic]
            [pseudoace.utils :as utils]
            [clojure.pprint :as pp]

            [pseudoace.import :as old-import]
            [pseudoace.ts-import :as ts-import]
            [acetyl.parser :as ace]

            [clojure.java.io :as io]
            [clojure.string :as string]
            [clojure.tools.cli :refer [parse-opts]])
  (:import (java.net InetAddress) 
           (java.io.FileInputStream) 
           (java.util.zip.GZIPInputStream)
           (java.lang.Runtimea))
  (:gen-class))

(def cli-options
  [;; First three strings describe a short-option, long-option with optional
   ;; example argument description, and a description. All three are optional
   ;; and positional.
   [nil "--model PATH" "Specify the model file that you would like to use that is found in the models folder e.g. models.wrm.WS250.annot"]
   [nil "--url URL" "Specify the url of the Dataomic transactor you would like to connect. Example: datomic:free://localhost:4334/WS25"]
   [nil "--schema-filename PATH" "Specify the name of the file for the schema view to be written to when selecting Action: generate-schema-view exampls schema250.edn"]
   [nil "--log-dir PATH" "Specifies the path to and empty directory to store the Datomic logs in. Example: /datastore/datomic/tmp/datomic/import-logs-WS250/"]
   [nil "--acedump-dir PATH" "Specifies the path to the directory of the desired acedump. Example /datastore/datomic/tmp/acedata/WS250/"]
   ["-v" "--verbose"]
   ["-h" "--help"]])

(defn usage [options-summary]
 (->> ["Pseudoace is tool for importing data from ACeDB into to Datomic database"
       ""
       "Usage: pseudoace [options] action"
       ""
       "Options:"
       options-summary
       ""
       "Actions:"
       "  create-database                      Select this option if you would like to create a Datomic database from a schema. Required options [model, url]"
       "  generate-datomic-schema-view         Select if you would like the schema to the database to be exported to a file. Required options [schema-filename, url]" 
       "  acedump-to-datomic-log               Select if you are importing data from ACeDB to Datomic and would like to create the Datomic log files [url, log-dir, acedump-dir]"
       "  sort-datomic-log                     Select if you would like to sort the log files generated from your ACeDB dump [log-dir]"
       "  import-logs-back-into-datomic        Select if you would like to import the sorted logs back into datomic [log-dir, url]"
       "  all-actions                          Select if you would like to perform all actions from acedb to datomic [all options required]"]
       (string/join \newline)))

(defn error-msg [errors]
   (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn exit [status msg]
   (println msg)
   (System/exit status))

(defn generate-datomic-schema-view [options]
    (if (:verbose options) (println "Generating Datomic schema view"))
    (if (:verbose options) (println "\tCreating database connection"))
    (def uri (:url options))
    (def con (datomic/connect uri))
    (utils/with-outfile (:schema-filename options)
    (doseq [s (schema-datomic/schema-from-db (datomic/db con))]
        (pp/pprint s)
        (println))
        (if (:verbose options) (println "\tReleasing database connection"))
        (datomic/release con)))

(defn generate-schema [options]
    (if (:verbose options) (println "\tGenerating Schema"))
    (if (:verbose options) (println "\tRead in annotated ACeDB models file generated by hand - PAD to create this"))
    (def models (model/parse-models (io/reader (string/join "" ["models/" (:model options)]))))
    (if (:verbose options) (println "\tMaking the datomic schema from the acedb annotated models"))
    (def schema (model2schema/models->schema models)))

(defn add-schema-attribute-to-datomic-schema [options con schema tx-quiet]
   (if (:verbose options) (println "\tAdding extra attribute 'schema' to list of attributes and add timestamp to preserve ACeDB timeseamps with auto-generated schema"))
   (try
       (tx-quiet con (conj schema
                    {:db/id          #db/id[:db.part/tx]
                     :db/txInstant   #inst "1970-01-01T00:00:01"}))
       (catch Exception e(str "Caught Exception: " (.getMessage e))))) 

(defn load-schema [options]
    (def uri (:url options))
    (if (:verbose options) (println "Loading Schema"))
    (if (:verbose options) (println "\tCreating database connection"))
    (def con (datomic/connect uri))
    ;; define function tx-quiet that runs a transaction, 
    ;; ensures it completes and throws away all of the output so it runs quietly
    (defn tx-quiet
       "Run a transaction but suppress the (potentially-large) report if it succeeds." 
       [con tx]
       @(datomic/transact con tx)
       nil)
    ;; Built-in schemas include explicit 1970-01-01 timestamps.
    ;; the 'metaschema' and 'locatable-schema' lines simply execute
    ;; what was read in on the previous two lines for metadata and locatables
    (tx-quiet con metadata-schema/metaschema)      ; pace namespace, used by importer
    ;;  this is also from the metadata package
    (tx-quiet con metadata-schema/basetypes)       ; Datomic equivalents for some ACeDB builtin types
    (tx-quiet con locatable-schema/locatable-schema)
    ;; add an extra attribute to the 'schema' list of schema attributes, 
    ;; saying this transaction occurs on 1st Jan 1970 to fake a first 
    ;; transaction to preserve the acedb timestamps
    (add-schema-attribute-to-datomic-schema options con schema tx-quiet)
    (if (:verbose options) (println "\tAdding locatables-extras"))
    (tx-quiet con locatable-schema/locatable-extras) ; pace metadata for locatable schema,
                                    ; needs to be transacted after the main
                                    ; schema.
    (if (:verbose options) (println "\tAdding wormbase-schema-fixups"))
    (tx-quiet con wormbase-schema-fixups/schema-fixups)
    (if (:verbose options) (println "\tReleasing database connection"))
    (datomic/release con))
 
(defn create-database [options]
    (if (:verbose options) (println "Creating Database"))
    (generate-schema options)
    (def uri (:url options))
    (datomic/create-database uri)
    (load-schema options))

(defn directory-walk [directory pattern]
  (doall (filter #(re-matches pattern (.getName %))
                 (file-seq (io/file directory)))))

(defn get-ace-files [directory]
    (map #(.getPath %) (directory-walk directory #".*\.ace.gz")))

(defn get-datomic-log-files [directory]
    (map #(.getPath %) (directory-walk directory #".*\.edn.gz")))

(def not-nil? (complement nil?))

(defn acedump-file-to-datalog [imp file log-dir verbose]
    (if (not-nil? verbose)  (println "Converting " file))
    ;; then pull out objects from the pipeline in chunks of 20 objects. 
    ;; Larger block size may be faster if you have plenty of memory
    (doseq [blk (->> (java.io.FileInputStream. file)
                     (java.util.zip.GZIPInputStream.)
                     (ace/ace-reader)
                     (ace/ace-seq)
                     (partition-all 20))] 
           (ts-import/split-logs-to-dir imp blk log-dir)))

(defn acedump-to-datomic-log [options]
    (if (:verbose options) (println "Converting ACeDump to Datomic Log"))
    (if (:verbose options) (println "\tCreating database connection"))
    (def uri (:url options))
    (def con (datomic/connect uri))
    (def imp (old-import/importer con)) ;; Helper object, holds a cache of schema data.
    (def log-dir (io/file (:log-dir options)))   ;; Must be an empty directory
    (def files (get-ace-files (:acedump-dir options)))
    (doseq [file files] (acedump-file-to-datalog imp file log-dir (:verbose options)))
    (if (:verbose options) (println "\tReleasing database connection"))
    (datomic/release con))

(defn remove-from-end [s end]
  (if (.endsWith s end)
      (.substring s 0 (- (count s)
                         (count end)))
    s))

(defn sort-datomic-log [options]
    (if (:verbose options) (println "sorting datomic log"))
    (def files (get-datomic-log-files (:log-dir options)))
    (doseq [file files] 
        (if (:verbose options) (println "sorting file " file))
        (def basename (remove-from-end file ".gz"))
        (println basename)))
;;        (. (java.lang.Runtime/getRuntime) exec "cd " (:log-dir options) "; gzip -dc " file " | sort -T sort-temp -k1,1 -s | gzip -c >" basename ".sort.gz")))      

(defn import-logs-into-datomic [options]
    (if (:verbose options) (println "importing logs into datomic"))
    (def uri (:url options))
    (def con (datomic/connect uri))
    (def log-files (->> (.listFiles (:log-dir options)
                        (filter #(.endsWith (.getName %) ".edn.sort.gz"))
                        (sort-by #(.getName %)))))
    (doseq [f log-files]
       (if (:verbose options) (println "Importing " (.getName f))
       (ts-import/play-logfile con (java.util.zip.GZIPInputStream. (java.io.FileInputStream. f)))))
    (if (:verbose options) (println "\tReleasing database connection"))
    (datomic/release con))

(defn all-actions [options]
    (generate-datomic-schema-view options)
    (create-database options)
    (acedump-to-datomic-log options)
    (sort-datomic-log options)
    (import-logs-into-datomic options)
    (test-datomic-data options))

(defn test-datomic-data [options]
    (if (:verbose options) (println "testing datomic data"))
    (def uri (:url options))
    (def con (datomic/connect uri))
    (is #{[923589767780191]} (datomic/q '[:find ?c :in $ :where [?c :gene/id "WBGene00018635"]] (datomic/db con)) ))

(defn -main [& args]
    (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    (cond
        (:help options) (exit 0 (usage summary))
        (not= (count arguments) 2) (exit 1 (usage summary))
        errors (exit 1 (error-msg errors)))
    (case (last arguments)
        "generate-datomic-schema-view" (if (or (string/blank? (:schema-filename options)) 
                                               (string/blank? (:url options)))
                                           (println "Options --url and --schema-filename are required for generating the schema view")
                                           (generate-datomic-schema-view options))
        "create-database"              (if (or (string/blank? (:model options)) 
                                               (string/blank? (:url options)))  
                                           (println "Options url and model are required when generating the dataomic schema view")  
                                           (create-database options))
        "acedump-to-datomic-log"       (if (or (string/blank? (:url options)) 
                                               (string/blank? (:log-dir options)) 
                                               (string/blank? (:acedump-dir options)))
                                           (println "Options url and log-dir and ace-dump-dir are required for converting the acedump into datomic-log format")
                                           (acedump-to-datomic-log options))
        "sort-datomic-log"             (if (string/blank? (:log-dir options))
                                           (println "Options log-dir is required for sorting the datomic log")
                                           (sort-datomic-log options))
        "import-logs-into-datomic"     (if (or (string/blank? (:log-dir options)) 
                                               (sting/blank? (:url options)))
                                           (println "Options log-dir and url are required for importing logs into datomic")
                                           (import-logs-into-datomic options))
        "test-datomic-data"            (if (or (string/blank? (:url options)))
                                           (println "Option url is require for performing tests on datomic data"))
        "all-actions"                  (if (or (string/blank? (:url options)) 
                                               (string/blank? (:log-dir options)) 
                                               (string/blank? (:acedump-dir options)) 
                                               (string/blank? (:schema-filname options)) 
                                               (string/blank? (:model options)))
                                           (println "All options are required if you would like to peform all actions")
                                           (all-actions options))
        (exit 1 (usage summary)))))
