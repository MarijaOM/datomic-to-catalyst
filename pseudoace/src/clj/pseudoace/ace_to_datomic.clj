(ns ace-to-datomic
  (:require [pseudoace.model :as model]
            [pseudoace.model2schema :as model2schema] 

            [datomic.api :as datomic]
            [pseudoace.metadata-schema :as metadata-schema]
            [pseudoace.locatable-schema :as locatable-schema]
            [pseudoace.wormbase-schema-fixups :as wormbase-schema-fixups]

            [pseudoace.schema-datomic :as schema-datomic]
            [pseudoace.utils :as utils]
            [clojure.pprint :as pp]

            [clojure.java.io :as io]
            [clojure.string :as string]
            [clojure.tools.cli :refer [parse-opts]])
  (:import (java.net InetAddress))
  (:gen-class))

(def cli-options
  [;; First three strings describe a short-option, long-option with optional
   ;; example argument description, and a description. All three are optional
   ;; and positional.
   [nil "--model PATH" "Specify the model file that you would like to use that is found in the models folder e.g. models.wrm.WS250.annot"]
   [nil "--url URL" "Specify the url of the Dataomic transactor you would like to connect to example: (datomic:free://localhost:4334/WS25)"]
   [nil "--schema-filename PATH" "Specify the name of the file for the schema view to be written to when selecting Action: generate-schema-view exampls schema250.edn"]
   ["-v" "--verbose"]
   ["-h" "--help"]])

(defn usage [options-summary]
 (->> ["Pseudoace is tool for importing data from ACeDB into to Datomic database"
       ""
       "Usage: pseudoace [options] action"
       ""
       "Options:"
       options-summary
       ""
       "Actions:"
       "  create-database              Select this option if you would like to create a Datomic database from a schema. Required options [model, url]"
       "  generate-datomic-schema-view Select if you would like the schema to the database to be exported to a file. Required options [schema-filename, url]" 
       ""
       "Please refer to the manual page for more information."]
       (string/join \newline)))

(defn error-msg [errors]
   (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn exit [status msg]
   (println msg)
   (System/exit status))

(defn generate-datomic-schema-view [options]
    (if (:verbose options) (println "Generating Datomic schema view"))
    (if (:verbose options) (println "\tCreating database connection"))
    (def uri (:url options))
    (def con (datomic/connect uri))
    (utils/with-outfile (:schema-filename options)
    (doseq [s (schema-datomic/schema-from-db (datomic/db con))]
        (pp/pprint s)
        (println))
        (if (:verbose options) (println "\tReleasing database connection"))
        (datomic/release con)))

(defn generate-schema [options]
    (if (:verbose options) (println "\tGenerating Schema"))
    (if (:verbose options) (println "\tRead in annotated ACeDB models file generated by hand - PAD to create this"))
    (def models (model/parse-models (io/reader (string/join "" ["models/" (:model options)]))))
    (if (:verbose options) (println "\tMaking the datomic schema from the acedb annotated models"))
    (def schema (model2schema/models->schema models)))

(defn add-schema-attribute-to-datomic-schema [options con schema tx-quiet]
   (if (:verbose options) (println "\tAdding extra attribute 'schema' to list of attributes and add timestamp to preserve ACeDB timeseamps with auto-generated schema"))
   (try
       (tx-quiet con (conj schema
                    {:db/id          #db/id[:db.part/tx]
                     :db/txInstant   #inst "1970-01-01T00:00:01"}))
       (catch Exception e(str "Caught Exception: " (.getMessage e))))) 

(defn create-database [options]
    (if (:verbose options) (println "Creating Database"))
    (generate-schema options)
    (def uri (:url options))
    (datomic/create-database uri)
    (if (:verbose options) (println "\tCreating database connection"))
    (def con (datomic/connect uri))
    ;; define function tx-quiet that runs a transaction, 
    ;; ensures it completes and throws away all of the output so it runs quietly
    (defn tx-quiet
       "Run a transaction but suppress the (potentially-large) report if it succeeds." 
       [con tx]
       @(datomic/transact con tx)
       nil)
    ;; Built-in schemas include explicit 1970-01-01 timestamps.
    ;; the 'metaschema' and 'locatable-schema' lines simply execute
    ;; what was read in on the previous two lines for metadata and locatables
    (tx-quiet con metadata-schema/metaschema)      ; pace namespace, used by importer
    ;;  this is also from the metadata package
    (tx-quiet con metadata-schema/basetypes)       ; Datomic equivalents for some ACeDB builtin types
    (tx-quiet con locatable-schema/locatable-schema)
    ;; add an extra attribute to the 'schema' list of schema attributes, 
    ;; saying this transaction occurs on 1st Jan 1970 to fake a first 
    ;; transaction to preserve the acedb timestamps
    (add-schema-attribute-to-datomic-schema options con schema tx-quiet)
    (if (:verbose options) (println "\tAdding locatables-extras"))
    (tx-quiet con locatable-schema/locatable-extras) ; pace metadata for locatable schema,
                                    ; needs to be transacted after the main
                                    ; schema.
    (if (:verbose options) (println "\tAdding wormbase-schema-fixups"))
    (tx-quiet con wormbase-schema-fixups/schema-fixups)
    (if (:verbose options) (println "\tReleasing database connection"))
    (datomic/release con))
 
(defn -main [& args]
    (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    ;; Handle help and error conditions
    (cond
        (:help options) (exit 0 (usage summary))
        (not= (count arguments) 2) (exit 1 (usage summary))
        errors (exit 1 (error-msg errors)))
        ;; Execute program with options
    (case (last arguments)
        "generate-datomic-schema-view" (if (or (string/blank? (:schema-filename options)) (string/blank? (:url options)))
                                          (println "Options --url and --schema-filename are required for generating the schema view")
                                          (generate-datomic-schema-view options))
        "create-database" (if (or (string/blank? (:model options)) (string/blank? (:url options)))  
                               (println "The option url is required when generating the dataomic schema view")  
                               (create-database options))
        (exit 1 (usage summary)))))
